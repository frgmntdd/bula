import telebot
import os
import google.generativeai as genai
from google.api_core import exceptions as google_exceptions

# --- –ù–ê–°–¢–†–û–ô–ö–ò –ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN')
GEMINI_API_KEY = os.environ.get('GEMINI_API_KEY')

if not TELEGRAM_TOKEN or not GEMINI_API_KEY:
    raise ValueError("TELEGRAM_TOKEN –∏ GEMINI_API_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

bot = telebot.TeleBot(TELEGRAM_TOKEN)
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel('gemini-2.5-pro')

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")

# --- –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –ë–û–¢–ê ---

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –Ω–∞ –±–∞–∑–µ Gemini 1.5 Pro. –ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å.")

@bot.message_handler(content_types=['text'])
def handle_text(message):
    placeholder = None
    try:
        placeholder = bot.reply_to(message, "‚è≥ –î—É–º–∞—é –Ω–∞–¥ –≤–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–æ–º...")

        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini
        response = model.generate_content(message.text)

        # --- –ù–û–í–´–ô, –ë–û–õ–ï–ï –ù–ê–î–ï–ñ–ù–´–ô –°–ü–û–°–û–ë –û–ë–†–ê–ë–û–¢–ö–ò –û–¢–í–ï–¢–ê ---
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –≤–æ–æ–±—â–µ –∫–∞–∫–æ–π-–ª–∏–±–æ —Ç–µ–∫—Å—Ç.
        #    response.parts —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç.
        if response.parts:
            # –ï—Å–ª–∏ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ, –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            answer = response.text
            bot.edit_message_text(
                chat_id=placeholder.chat.id,
                message_id=placeholder.message_id,
                text=answer
            )
        else:
            # 2. –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç, –æ—Ç–≤–µ—Ç –±—ã–ª –ø—É—Å—Ç—ã–º (—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –∏–∑-–∑–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤).
            # –ú—ã —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø—Ä–∏—á–∏–Ω—É, –µ—Å–ª–∏ API –µ—ë –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç
            finish_reason = response.candidates[0].finish_reason.name if response.candidates else "UNKNOWN"
            
            error_msg = (
                "üò• **–ú–æ–¥–µ–ª—å –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞ –æ—Ç–≤–µ—Ç.**\n\n"
                "–≠—Ç–æ —á–∞—Å—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç –Ω–∞—Ä—É—à–∞–µ—Ç –ø–æ–ª–∏—Ç–∏–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Google.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å.\n\n"
                f"*–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–∏—á–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: `{finish_reason}`*"
            )

            bot.edit_message_text(
                chat_id=placeholder.chat.id,
                message_id=placeholder.message_id,
                text=error_msg,
                parse_mode='Markdown'
            )

    except Exception as e:
        # –õ–æ–≤–∏–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ, –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
        print(f"[ERROR] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        if placeholder:
            bot.edit_message_text(
                chat_id=placeholder.chat.id,
                message_id=placeholder.message_id,
                text=f"üò• **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.**\n\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n`{e}`",
                parse_mode='Markdown'
            )


# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê –í –†–ï–ñ–ò–ú–ï –ü–û–õ–õ–ò–ù–ì–ê ---
if __name__ == "__main__":
    bot.infinity_polling()